package rpc

import (
	"context"
	"github.com/golang/protobuf/ptypes/empty"
	"{{.ModName}}/app/executor/cmd"
	"{{.ModName}}/app/executor/query"
	api "{{.ModName}}/proto"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type Handler struct {
	cmdApp   *cmd.AppCmd
	queryApp *query.AppQuery
}

func NewHandler(cmdApp *cmd.AppCmd, queryApp *query.AppQuery) *Handler {
	return &Handler{
		cmdApp:   cmdApp,
		queryApp: queryApp,
	}
}

func (h *Handler) Ping(ctx context.Context, req *empty.Empty) (rsp *empty.Empty, err error) {
	rsp = &empty.Empty{}
	err = status.Error(codes.OK, "ok")
	return
}

func(h *Handler)SayHello(ctx context.Context, in *api.HelloReq) (*empty.Empty, error){
	rsp := &empty.Empty{}
	return rsp, nil
}

func(h *Handler)SayHelloURL(ctx context.Context, in *api.HelloReq) (*api.HelloResp, error){
	rsp := &api.HelloResp{
		Content:              "hello :"+in.Name,
	}
	return rsp, nil
}
